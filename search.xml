<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring事务管理</title>
      <link href="/post/762945f0.html"/>
      <url>/post/762945f0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring事务支持"><a href="#Spring事务支持" class="headerlink" title="Spring事务支持"></a>Spring事务支持</h1><p>Spring 支持两种事务方式，分别是<strong>编程式事务</strong>和声明式事务，后者最常见，通常情况下只需要一个 @Transactional 就搞定了（代码侵入性降到了最低）</p><h2 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h2><p>编程式事务是指将事务管理代码嵌入嵌入到业务代码中，来控制事务的提交和回滚。例如使用 TransactionTemplate 来管理事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    transactionTemplate.execute(<span class="keyword">new</span> <span class="title class_">TransactionCallbackWithoutResult</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doInTransactionWithoutResult</span><span class="params">(TransactionStatus transactionStatus)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// ....  业务代码</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="comment">//回滚</span></span><br><span class="line">                transactionStatus.setRollbackOnly();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在编程式事务中，必须在每个业务操作中包含额外的事务管理代码，就导致代码看起来非常的臃肿，但能更好理解 Spring 的事务管理。</p><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p>声明式事务将事务管理代码从业务方法中抽离了出来，以声明式的方式来实现事务管理，这个会用到 Spring 当中的AOP，其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，执行完目标方法之后根据执行的情况提交或者回滚。</p><p>声明式事务管理的粒度是<strong>方法级别</strong>，而编程式事务是可以精确到<strong>代码块级别</strong>的。</p><h1 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h1><p>Spring 将事务管理的核心抽象为一个事务管理器（TransactionManager），它的源码只有一个简单的接口定义</p><h1 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h1><h1 id="事务隔离等级"><a href="#事务隔离等级" class="headerlink" title="事务隔离等级"></a>事务隔离等级</h1><h1 id="事务失效"><a href="#事务失效" class="headerlink" title="事务失效"></a>事务失效</h1><p>(声明式事务)Spring事务生效一般是由代理对象调用声明了事务的方法(@Transactional)，Spring事务失效的一些场景：</p><ul><li>在方法中捕获的异常但没有抛出去</li><li>非事务方法调用事务方法</li><li>事务方法内部调用事务方法(此方法若非代理对象调用则失效)</li><li>@Transactional标记的方法不是public</li><li>抛出的异常与rollbackFor指定的异常不匹配，默认rollbackFor指定的异常是RuntimeException</li><li>数据库表不支持事务，如mysql的MyISAM(InnoDB支持事务)</li><li>Spring的传播行为导致事务失效，如PROPAGATION_NEVER，PROPAGATION_NOT_SUPPORTED</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成minIO及文件上传</title>
      <link href="/post/e83dca1.html"/>
      <url>/post/e83dca1.html</url>
      
        <content type="html"><![CDATA[<h1 id="MinIO简介"><a href="#MinIO简介" class="headerlink" title="MinIO简介"></a>MinIO简介</h1><p>MinIO 是一个非常轻量的服务,可以很简单的和其他应用的结合使用，它兼容亚马逊 S3 云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等。</p><p>它一大特点就是轻量，使用简单，功能强大，支持各种平台，单个文件最大5TB，兼容 Amazon S3接口，提供了 Java、Python、GO等多版本SDK支持。</p><p>官网：<a href="https://min.io/">https://min.io</a></p><p>中文：<a href="https://www.minio.org.cn/%EF%BC%8Chttp://docs.minio.org.cn/docs/">https://www.minio.org.cn/，http://docs.minio.org.cn/docs/</a></p><h1 id="docker安装MinIO"><a href="#docker安装MinIO" class="headerlink" title="docker安装MinIO"></a>docker安装MinIO</h1><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 10000:9000 -p 9090:9090 \</span><br><span class="line"> --name minio \</span><br><span class="line"> -d --restart=always \</span><br><span class="line"> -e <span class="string">&quot;MINIO_ACCESS_KEY=admin&quot;</span> \</span><br><span class="line"> -e <span class="string">&quot;MINIO_SECRET_KEY=admin123456&quot;</span> \</span><br><span class="line"> -v /mydata/minio/data:/data  \</span><br><span class="line"> -v /mydata/minio/config:/root/.minio \</span><br><span class="line"> minio/minio  server\</span><br><span class="line"> /data --console-address <span class="string">&quot;:9090&quot;</span> -address <span class="string">&quot;:9000&quot;</span></span><br></pre></td></tr></table></figure><ul><li>这里的9090端口指的是minio的客户端端口。虽然设置9090，但是在访问9000的时候，他也会自动跳到9090。</li><li>9000端口是minio的服务端端口，程序在连接minio的时候，就是通过这个端口来连接的。</li><li>MINIO_ACCESS_KEY:账号 MINIO_SECRET_KEY:密码 (账号不低于3位密码不低于8位，不然容器会启动不成功)</li></ul><h2 id="访问minIO"><a href="#访问minIO" class="headerlink" title="访问minIO"></a>访问minIO</h2><p>访问<a href="http://47.96.105.117:10000/">http://47.96.105.117:10000/</a> 即可登录(这里10000端口映射9000)</p><p><img src="https://cccblogimgs.oss-cn-hangzhou.aliyuncs.com/image-20230221155507399.png" alt="image-20230221155507399"></p><p>两个事情：</p><ol><li>Access Keys页面创建Access Keys</li><li>Buckets页面创建bucket，并且设置访问权限为public</li></ol><h1 id="Springboot集成"><a href="#Springboot集成" class="headerlink" title="Springboot集成"></a>Springboot集成</h1><h2 id="SDK测试"><a href="#SDK测试" class="headerlink" title="SDK测试"></a>SDK测试</h2><p>可参考<a href="https://docs.min.io/docs/java-client-quickstart-guide.html">java的sdk文档</a></p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试minio</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testMinIO</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span></span><br><span class="line">            MinioClient.builder()</span><br><span class="line">                    .endpoint(<span class="string">&quot;Endpoint&quot;</span>)</span><br><span class="line">                    .credentials(<span class="string">&quot;Access Key&quot;</span>, <span class="string">&quot;Secret Key&quot;</span>)</span><br><span class="line">                    .build();</span><br><span class="line">    <span class="comment">// 上传文件</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.uploadObject(</span><br><span class="line">                    UploadObjectArgs.builder()</span><br><span class="line">                            .bucket(<span class="string">&quot;test01&quot;</span>)</span><br><span class="line">                            .object(<span class="string">&quot;main_titles.mp4&quot;</span>)</span><br><span class="line">                            .filename(<span class="string">&quot;***\\main_titles.mp4&quot;</span>)</span><br><span class="line">                            .build());</span><br><span class="line">            System.out.println(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除文件</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">RemoveObjectArgs</span> <span class="variable">removeObjectArgs</span> <span class="operator">=</span> RemoveObjectArgs.builder().</span><br><span class="line">                    bucket(<span class="string">&quot;test01&quot;</span>).object(<span class="string">&quot;头像.jpg&quot;</span>).build();</span><br><span class="line">            minioClient.removeObject(removeObjectArgs);</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看文件</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">GetObjectArgs</span> <span class="variable">getObjectArgs</span> <span class="operator">=</span> GetObjectArgs.builder()</span><br><span class="line">                .bucket(<span class="string">&quot;test01&quot;</span>).object(<span class="string">&quot;main_titles.mp4&quot;</span>).build();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">GetObjectResponse</span> <span class="variable">inputStream</span> <span class="operator">=</span> minioClient.getObject(getObjectArgs);</span><br><span class="line">             <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\13601\\Desktop\\main_title22s.mp4&quot;</span>));</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                IOUtils.copy(inputStream, outputStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;查看失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="上传小文件"><a href="#上传小文件" class="headerlink" title="上传小文件"></a>上传小文件</h3><p>minIO配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">minioClient</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span></span><br><span class="line">                MinioClient.builder()</span><br><span class="line">                        .endpoint(endpoint)</span><br><span class="line">                        .credentials(accessKey, secretKey)</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="keyword">return</span> minioClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>endpoint即minio对象存储服务的url</li><li>accessKey，secretKey 注入即可</li></ul><p>下面是一个通用的小文件上传接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UploadFileResultDto <span class="title function_">uploadFile</span><span class="params">(Long companyId, UploadFileParamsDto uploadFileParamsDto, <span class="type">byte</span>[] bytes, String folder, String objectName)</span> &#123;</span><br><span class="line">    <span class="comment">// 生成文件id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileId</span> <span class="operator">=</span> DigestUtil.md5Hex(bytes);</span><br><span class="line">    <span class="comment">//文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> uploadFileParamsDto.getFilename();</span><br><span class="line">    <span class="comment">//构造objectname</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isEmpty(objectName)) &#123;</span><br><span class="line">        objectName = fileId + filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isEmpty(folder)) &#123;</span><br><span class="line">        <span class="comment">//通过日期构造文件存储路径</span></span><br><span class="line">        folder = getFileFolder(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (folder.indexOf(<span class="string">&quot;/&quot;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        folder = folder + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对象名称</span></span><br><span class="line">    objectName = folder + objectName;</span><br><span class="line">    <span class="type">MediaFiles</span> <span class="variable">mediaFiles</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// minio上传（流文件上传）</span></span><br><span class="line">   addMediaFilesToMinIO(bytes,bucket_Files,objectName,uploadFileParamsDto.getContentType());</span><br><span class="line">        <span class="comment">// 保存至数据库</span></span><br><span class="line">        mediaFiles = currentProxy.addMediaFilesToDb(companyId, fileId, uploadFileParamsDto, bucket_Files, objectName);</span><br><span class="line">        <span class="comment">// 封装返回</span></span><br><span class="line">        <span class="type">UploadFileResultDto</span> <span class="variable">uploadFileResultDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadFileResultDto</span>();</span><br><span class="line">        BeanUtil.copyProperties(mediaFiles, uploadFileResultDto);</span><br><span class="line">        <span class="keyword">return</span> uploadFileResultDto;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;文件上传出错&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将文件写入minIO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMediaFilesToMinIO</span><span class="params">(<span class="type">byte</span>[] bytes, String bucket, String objectName, String contentType)</span> &#123;</span><br><span class="line">    <span class="comment">//转为流</span></span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// minio上传（流文件上传）</span></span><br><span class="line">        <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">            .bucket(bucket).object(objectName)</span><br><span class="line">            .stream(byteArrayInputStream,byteArrayInputStream.available(),-<span class="number">1</span>)</span><br><span class="line">            .contentType(contentType)</span><br><span class="line">            .build();</span><br><span class="line">        minioClient.putObject(putObjectArgs);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;上传文件至minio出错&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上传大文件"><a href="#上传大文件" class="headerlink" title="上传大文件"></a>上传大文件</h3><p>上传大文件需要将文件分块上传，否则因为网络问题出现上传中断问题，又需将大文件重新上传</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>上传大文件的流程可如下：</p><p><img src="https://cccblogimgs.oss-cn-hangzhou.aliyuncs.com/%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E7%9A%84%E6%B5%81%E7%A8%8B.png"></p><ol><li>前端上传文件前请求媒资接口层检查文件是否存在，如果已经存在则不再上传</li><li>如果文件在系统不存在前端开始上传，首先对视频文件进行分块</li><li>前端分块进行上传，上传前首先检查分块是否上传，如已上传则不再上传，如果未上传则开始上传分块</li><li>前端请求接口层请求上传分块</li><li>接口层请求服务层上传分块</li><li>服务端将分块信息上传到MinIO</li><li>前端将分块上传完毕请求接口层合并分块</li><li>接口层请求服务层合并分块</li><li>服务层根据文件信息找到MinIO中的分块文件，下载到本地临时目录，将所有分块下载完毕后开始合并</li><li>合并完成将合并后的文件上传到MinIO</li></ol><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>四个接口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class BigFilesController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    MediaFileService mediaFileService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @ApiOperation(value = <span class="string">&quot;文件上传前检查文件&quot;</span>)</span><br><span class="line">    @PostMapping(<span class="string">&quot;/upload/checkfile&quot;</span>)</span><br><span class="line">    public RestResponse&lt;Boolean&gt; checkfile(</span><br><span class="line">            @RequestParam(<span class="string">&quot;fileMd5&quot;</span>) String fileMd5</span><br><span class="line">    ) throws Exception &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @ApiOperation(value = <span class="string">&quot;分块文件上传前的检测&quot;</span>)</span><br><span class="line">    @PostMapping(<span class="string">&quot;/upload/checkchunk&quot;</span>)</span><br><span class="line">    public RestResponse&lt;Boolean&gt; checkchunk(@RequestParam(<span class="string">&quot;fileMd5&quot;</span>) String fileMd5,</span><br><span class="line">                                            @RequestParam(<span class="string">&quot;chunk&quot;</span>) int chunk) throws Exception &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value = <span class="string">&quot;上传分块文件&quot;</span>)</span><br><span class="line">    @PostMapping(<span class="string">&quot;/upload/uploadchunk&quot;</span>)</span><br><span class="line">    public RestResponse uploadchunk(@RequestParam(<span class="string">&quot;file&quot;</span>) MultipartFile file,</span><br><span class="line">                                    @RequestParam(<span class="string">&quot;fileMd5&quot;</span>) String fileMd5,</span><br><span class="line">                                    @RequestParam(<span class="string">&quot;chunk&quot;</span>) int chunk) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value = <span class="string">&quot;合并文件&quot;</span>)</span><br><span class="line">    @PostMapping(<span class="string">&quot;/upload/mergechunks&quot;</span>)</span><br><span class="line">    public RestResponse mergechunks(@RequestParam(<span class="string">&quot;fileMd5&quot;</span>) String fileMd5,</span><br><span class="line">                                    @RequestParam(<span class="string">&quot;fileName&quot;</span>) String fileName,</span><br><span class="line">                                    @RequestParam(<span class="string">&quot;chunkTotal&quot;</span>) int chunkTotal) throws Exception &#123;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> minio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
